{"version":3,"sources":["components/TimerForm.js","components/helpers.js","components/TimerActionButton.js","components/TimerControlButtons.js","components/Timer.js","components/EditableTimer.js","components/EditableTimerList.js","components/ToggleableTimerForm.js","components/TimersDashboard.js","App.js","index.js"],"names":["TimerForm","state","errorsList","this","refs","title","value","project","props","onFormSubmit","id","push","setState","submitText","Card","centered","Content","Form","error","length","Field","type","ref","defaultValue","Message","list","Button","Group","attached","as","basic","color","onClick","handleSubmit","bind","onFormClose","React","Component","pad","numberString","size","padded","renderElapsedString","elapsed","runningSince","totalElapsed","Date","now","ms","seconds","Math","floor","minutes","hours","toString","join","millisecondsToHuman","TimerActionButton","timerIsRunning","onStopClick","onStartClick","visibleButtonsStyle","visibility","opacity","transition","hiddenButtonsStyle","TimerControlButtons","style","showButtons","extra","className","Icon","name","onEditClick","cursor","onTrashClick","Timer","forceUpdateInterval","setInterval","forceUpdate","clearInterval","clearTimeout","showButtonsTimeout","elapsedString","onMouseEnter","onMouseLeave","hideButtons","Header","Meta","Description","textAlign","EditableTimer","editFormOpen","timer","closeForm","e","openForm","EditableTimerList","timers","map","key","ToggleableTimerForm","isOpen","Segment","icon","TimerDashboard","attrs","Object","assign","t","uuid","v4","newTimer","concat","timerId","filter","lastElapsed","Grid","Column","mobile","tablet","computer","updateTimer","deleteTimer","startTimer","stopTimer","createTimer","App","Container","Divider","hidden","dividing","TimersDashboard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5dc3278c.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, Form, Button, Message } from 'semantic-ui-react'\n\nclass TimerForm extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      errorsList: []\n    }\n  }\n  handleSubmit () {\n    if (this.refs.title.value && this.refs.project.value) {\n      this.props.onFormSubmit({\n        id: this.props.id,\n        title: this.refs.title.value,\n        project: this.refs.project.value\n      })\n    } else {\n      let errorsList = []\n      if (!this.refs.title.value) {\n        errorsList.push('The title cannot be empty.')\n      }\n      if (!this.refs.project.value) {\n        errorsList.push('The project cannot be empty.')\n      }\n      this.setState({ errorsList })\n    }\n  }\n  render () {\n    const submitText = this.props.id ? 'Update' : 'Create'\n    return (\n      <Card centered>\n        <Card.Content>\n          <Form error={this.state.errorsList.length > 0}>\n            <Form.Field>\n              <label>Title</label>\n              <input type='text' ref='title' defaultValue={this.props.title}/>\n            </Form.Field>\n            <Form.Field>\n              <label>Project</label>\n              <input type='text' ref='project' defaultValue={this.props.project}/>\n            </Form.Field>\n            <Message\n              error\n              list={this.state.errorsList}\n            />\n            <Button.Group attached='bottom'>\n              <Button as='div' basic color='blue' onClick={this.handleSubmit.bind(this)}>{ submitText }</Button>\n              <Button as='div' basic color='red' onClick={this.props.onFormClose}>Cancel</Button>\n            </Button.Group>\n          </Form>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n\nexport default TimerForm\n","import uuid from 'uuid'\n\nconst newTimer = (attrs = {}) => {\n  const timer = {\n    title: attrs.title || 'Timer',\n    project: attrs.project || 'Project',\n    id: uuid.v4(), // eslint-disable-line no-undef\n    elapsed: 0\n  }\n\n  return timer\n}\n\n// const findById = (array, id, cb) => {\n//   array.forEach((el) => {\n//     if (el.id === id) {\n//       cb(el)\n//       return\n//     }\n//   })\n// }\n\nconst pad = (numberString, size) => {\n  let padded = numberString\n  while (padded.length < size) padded = `0${padded}`\n  return padded\n}\n\nconst millisecondsToHuman = (ms) => {\n  const seconds = Math.floor((ms / 1000) % 60)\n  const minutes = Math.floor((ms / 1000 / 60) % 60)\n  const hours = Math.floor(ms / 1000 / 60 / 60)\n\n  const humanized = [\n    pad(hours.toString(), 2),\n    pad(minutes.toString(), 2),\n    pad(seconds.toString(), 2)\n  ].join(':')\n\n  return humanized\n}\n\nconst renderElapsedString = (elapsed, runningSince) => {\n  let totalElapsed = elapsed\n  if (runningSince) {\n    totalElapsed += Date.now() - runningSince\n  }\n  return millisecondsToHuman(totalElapsed)\n}\n\nexport {\n  millisecondsToHuman,\n  newTimer,\n  renderElapsedString\n}\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst TimerActionButton = props => {\n  if (props.timerIsRunning) {\n    return (\n      <Button\n        as='div'\n        attached='bottom'\n        color='red'\n        basic\n        onClick={props.onStopClick}>\n        Arreter\n      </Button>\n    )\n  } else {\n    return (\n      <Button\n        as='div'\n        attached='bottom'\n        color='green'\n        basic\n        onClick={props.onStartClick}>\n        Demarrer\n      </Button>\n    )\n  }\n}\n\nexport default TimerActionButton\n","import React from 'react'\nimport { Card, Icon } from 'semantic-ui-react'\n\nconst visibleButtonsStyle = {\n  visibility: 'visible',\n  opacity: 1,\n  transition: 'opacity .25s ease-in'\n}\n\nconst hiddenButtonsStyle = {\n  visibility: 'hidden',\n  opacity: 0,\n  transition: 'opacity .25s ease-in'\n}\n\nconst TimerControlButtons = props => {\n  return (\n    <Card.Content\n      style={\n        props.showButtons\n        ? visibleButtonsStyle\n        : hiddenButtonsStyle\n      }\n      extra>\n      <span className=\"right floated\">\n        <Icon\n          name='edit'\n          onClick={props.onEditClick}\n          style={{ cursor: 'pointer' }}\n        />\n      </span>\n      <span className=\"right floated\">\n        <Icon\n          name='trash'\n          style={{ cursor: 'pointer' }}\n          onClick={() => props.onTrashClick(props.id)}\n        />\n      </span>\n    </Card.Content>\n  )\n}\n\nexport default TimerControlButtons\n","import React from 'react'\nimport { Card, Header } from 'semantic-ui-react'\nimport { renderElapsedString } from './helpers'\n\nimport TimerActionButton from './TimerActionButton'\nimport TimerControlButtons from './TimerControlButtons'\n\nclass Timer extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      showButtons: false\n    }\n  }\n  componentDidMount () {\n    this.forceUpdateInterval = setInterval(() => this.forceUpdate(), 50)\n  }\n  componentWillUnmount () {\n    clearInterval(this.forceUpdateInterval)\n    clearTimeout(this.showButtonsTimeout)\n  }\n  showButtons () {\n    this.setState({ showButtons: true })\n  }\n  hideButtons () {\n    this.setState({ showButtons: false })\n  }\n  render () {\n    const elapsedString = renderElapsedString(\n      this.props.elapsed,\n      this.props.runningSince\n    )\n    return (\n      <Card\n        centered\n        onMouseEnter={() => this.showButtonsTimeout = setInterval(() => this.showButtons(), 500)}\n        onMouseLeave={() => {\n          clearTimeout(this.showButtonsTimeout)\n          this.hideButtons()\n        }}>\n        <Card.Content>\n          <Card.Header>\n            {this.props.title}\n          </Card.Header>\n          <Card.Meta>\n            {this.props.project}\n          </Card.Meta>\n          <Card.Description>\n            <Header as='h2' textAlign='center'>{ elapsedString }</Header>\n          </Card.Description>\n          <TimerControlButtons\n            id={this.props.id}\n            showButtons={this.state.showButtons}\n            onTrashClick={this.props.onTrashClick}\n            onEditClick={this.props.onEditClick}\n          />\n        </Card.Content>\n        <TimerActionButton\n          timerIsRunning={!!this.props.runningSince}\n          onStartClick={() => this.props.onStartClick(this.props.id)}\n          onStopClick={() => this.props.onStopClick(this.props.id)}\n        />\n      </Card>\n    )\n  }\n}\n\nexport default Timer\n","import React from 'react'\nimport TimerForm from './TimerForm'\nimport Timer from './Timer'\n\nclass EditableTimer extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      editFormOpen: false\n    }\n  }\n  closeForm () {\n    this.setState({ editFormOpen: false })\n  }\n  openForm () {\n    this.setState({ editFormOpen: true })\n  }\n  render () {\n    if (this.state.editFormOpen) {\n      return (\n        <TimerForm\n          id={this.props.id}\n          title={this.props.title}\n          project={this.props.project}\n          onFormSubmit={timer => {\n            this.props.onFormSubmit(timer)\n            this.closeForm()\n          }}\n          onFormClose={e => this.closeForm()}\n        />\n      )\n    } else {\n      return (\n        <Timer\n          id={this.props.id}\n          title={this.props.title}\n          project={this.props.project}\n          elapsed={this.props.elapsed}\n          runningSince={this.props.runningSince}\n          onEditClick={() => this.openForm()}\n          onTrashClick={this.props.onTrashClick}\n          onStartClick={this.props.onStartClick}\n          onStopClick={this.props.onStopClick}\n        />\n      )\n    }\n  }\n}\n\nexport default EditableTimer\n","import React from 'react'\n\nimport EditableTimer from './EditableTimer'\n\nconst EditableTimerList = props => (\n  <div>\n    {props.timers.map(timer => (\n      <EditableTimer\n        key={timer.id}\n        {...timer}\n        onFormSubmit={props.onFormSubmit}\n        onTrashClick={props.onTrashClick}\n        onStartClick={props.onStartClick}\n        onStopClick={props.onStopClick}\n      />\n    ))}\n  </div>\n)\n\nexport default EditableTimerList\n","import React from 'react'\nimport { Segment, Button } from 'semantic-ui-react'\n\nimport TimerForm from './TimerForm'\n\nclass ToggleableTimerForm extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      isOpen: false\n    }\n  }\n  render () {\n    if (this.state.isOpen) {\n      return <TimerForm\n                onFormSubmit={timer => {\n                  this.props.onFormSubmit(timer)\n                  this.setState({ isOpen: false })\n                }}\n                \n                onFormClose={() => this.setState({ isOpen: false })}\n              />\n    } else {\n      return (\n        <Segment basic textAlign='center'>\n          <Button\n            basic\n            icon ='plus'\n            color = 'blue'\n            onClick = {() => this.setState({ isOpen: true })}\n          />\n        </Segment>\n      )\n    }\n  }\n}\n\nexport default ToggleableTimerForm\n","import React from 'react'\nimport { Grid } from 'semantic-ui-react'\n/*import uuid from 'uuid'*/\nimport EditableTimerList from './EditableTimerList'\nimport ToggleableTimerForm from './ToggleableTimerForm'\nimport { newTimer } from './helpers'\n\nclass TimerDashboard extends React.Component {\n  constructor () {\n    super()\n\n    this.state = {\n      timers: [\n       /* {\n          title: 'Brainstoring',\n          project: 'Codeloccol',\n          id: uuid.v4(),\n          elapsed: 1850000,\n          runningSince: Date.now()\n        }*/\n        \n      ]\n    }\n  }\n\n\n  updateTimer (attrs) {\n    this.setState({\n      timers: this.state.timers.map(timer => {\n        if (timer.id === attrs.id) {\n          return Object.assign({}, timer, {\n            title: attrs.title,\n            project: attrs.project\n          })\n\n        } else {\n          return timer\n        }\n      })\n    })\n  }\n\n  createTimer (timer) {\n    const t = newTimer(timer)\n    this.setState({\n      timers: this.state.timers.concat(t)\n    })\n  }\n\n  deleteTimer (timerId) {\n    this.setState({\n      timers: this.state.timers.filter(t => t.id !== timerId)\n    })\n  }\n  startTimer (timerId) {\n    const now = Date.now()\n\n    this.setState({\n      timers: this.state.timers.map(timer => {\n        if (timer.id === timerId) {\n          return Object.assign({}, timer, {\n            runningSince: now\n          })\n        } else {\n          return timer\n        }\n      })\n    })\n  }\n\n  stopTimer (timerId) {\n    const now = Date.now()\n\n    this.setState({\n      timers: this.state.timers.map(timer => {\n        if (timer.id === timerId) {\n          const lastElapsed = now-timer.runningSince\n          return Object.assign({}, timer, {\n            elapsed: timer.elapsed + lastElapsed,\n            runningSince: null\n          })\n        } else {\n          return timer\n        }\n      })\n    })\n  }\n\n  render () {\n    return (\n      <Grid centered>\n        <Grid.Column mobile={16} tablet={8} computer={6}>\n          <EditableTimerList\n            timers={this.state.timers}\n            onFormSubmit={attrs => this.updateTimer(attrs)}\n            onTrashClick={timerId => this.deleteTimer(timerId)}\n            onStartClick={timerId => this.startTimer(timerId)}\n            onStopClick={timerId => this.stopTimer(timerId)}\n          />\n          <ToggleableTimerForm\n            onFormSubmit={timer => this.createTimer(timer)}\n          />\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\nexport default TimerDashboard\n","import React, { Component } from 'react'\nimport { Container, Header, Divider } from 'semantic-ui-react'\nimport TimersDashboard from './components/TimersDashboard'\n\nimport 'semantic-ui-css/semantic.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <Container>\n        <Divider hidden />\n        <Header as='h2' dividing textAlign='center' className='ui blue title'>Time Tracking</Header>\n        <TimersDashboard />\n      </Container> \n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}